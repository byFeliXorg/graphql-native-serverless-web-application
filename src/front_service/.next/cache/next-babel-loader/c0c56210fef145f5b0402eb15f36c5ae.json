{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"D:\\\\DEV\\\\git_microservices\\\\microservices\\\\src\\\\front_service\\\\src\\\\components\\\\data\\\\offerList.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UpdateItem($id: ID!, $isComplete: Boolean!) {\\n    updateItem(id: $id, data: { isComplete: $isComplete }) {\\n      _id\\n      isComplete\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation DeleteItem($id: ID!) {\\n    deleteItem(id: $id) {\\n      _id\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    allOffres {\\n        data {\\n        title\\n        address {\\n            ville\\n        }\\n        postedBy {\\n            email\\n            id_firebase_auth\\n            _id\\n        }\\n        }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nvar OFFER_QUERY = gql(_templateObject());\nvar DELETE_ITEM = gql(_templateObject2());\nvar UPDATE_ITEM = gql(_templateObject3());\nexport function OfferList() {\n  _s();\n\n  var _this = this;\n\n  var _useQuery = useQuery(OFFER_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n  /*\r\n    const [deleteItem, { loading: deleteLoading }] = useMutation(DELETE_ITEM, {\r\n      refetchQueries: [{ query: ITEMS_QUERY }],\r\n    });\r\n  \r\n    const [updateItem, { loading: updateLoading }] = useMutation(UPDATE_ITEM);\r\n  */\n\n\n  if (loading) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, data.allOffres.data.map(function (item) {\n    var labelStyles = item.isComplete ? {\n      style: {\n        textDecoration: \"line-through\"\n      }\n    } : {};\n    return __jsx(\"li\", {\n      key: item._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", _extends({}, labelStyles, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), item.title));\n  }));\n}\n\n_s(OfferList, \"uHu6+Av6iz/Cemw652GCrFuaHvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = OfferList;\n\nvar _c;\n\n$RefreshReg$(_c, \"OfferList\");","map":{"version":3,"sources":["D:/DEV/git_microservices/microservices/src/front_service/src/components/data/offerList.js"],"names":["React","gql","useMutation","useQuery","OFFER_QUERY","DELETE_ITEM","UPDATE_ITEM","OfferList","data","loading","allOffres","map","item","labelStyles","isComplete","style","textDecoration","_id","title"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AAEA,IAAMC,WAAW,GAAGH,GAAH,mBAAjB;AAkBA,IAAMI,WAAW,GAAGJ,GAAH,oBAAjB;AAQA,IAAMK,WAAW,GAAGL,GAAH,oBAAjB;AASA,OAAO,SAASM,SAAT,GAAqB;AAAA;;AAAA;;AAAA,kBACAJ,QAAQ,CAACC,WAAD,CADR;AAAA,MAClBI,IADkB,aAClBA,IADkB;AAAA,MACZC,OADY,aACZA,OADY;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAIA,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACE,SAAL,CAAeF,IAAf,CAAoBG,GAApB,CAAwB,UAACC,IAAD,EAAU;AACjC,QAAMC,WAAW,GAAGD,IAAI,CAACE,UAAL,GAChB;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAE;AAAlB;AAAT,KADgB,GAEhB,EAFJ;AAGA,WACE;AAAI,MAAA,GAAG,EAAEJ,IAAI,CAACK,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,2BAAUJ,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAwBD,IAAI,CAACM,KAA7B,CADF,CADF;AAMD,GAVA,CADH,CADF;AAeD;;GA5BeX,S;UACYJ,Q;;;KADZI,S","sourcesContent":["import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\n\r\nconst OFFER_QUERY = gql`\r\n  {\r\n    allOffres {\r\n        data {\r\n        title\r\n        address {\r\n            ville\r\n        }\r\n        postedBy {\r\n            email\r\n            id_firebase_auth\r\n            _id\r\n        }\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_ITEM = gql`\r\n  mutation DeleteItem($id: ID!) {\r\n    deleteItem(id: $id) {\r\n      _id\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_ITEM = gql`\r\n  mutation UpdateItem($id: ID!, $isComplete: Boolean!) {\r\n    updateItem(id: $id, data: { isComplete: $isComplete }) {\r\n      _id\r\n      isComplete\r\n    }\r\n  }\r\n`;\r\n\r\nexport function OfferList() {\r\n  const { data, loading } = useQuery(OFFER_QUERY);\r\n/*\r\n  const [deleteItem, { loading: deleteLoading }] = useMutation(DELETE_ITEM, {\r\n    refetchQueries: [{ query: ITEMS_QUERY }],\r\n  });\r\n\r\n  const [updateItem, { loading: updateLoading }] = useMutation(UPDATE_ITEM);\r\n*/\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {data.allOffres.data.map((item) => {\r\n        const labelStyles = item.isComplete\r\n          ? { style: { textDecoration: \"line-through\" } }\r\n          : {};\r\n        return (\r\n          <li key={item._id}>\r\n            <span {...labelStyles}>{item.title}</span>\r\n            \r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}