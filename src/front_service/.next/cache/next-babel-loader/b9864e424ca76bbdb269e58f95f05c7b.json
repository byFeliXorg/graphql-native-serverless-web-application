{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Form, Button, Card, Alert, Container } from \"react-bootstrap\";\nimport { AppWithAuthentication } from \"../src/components/App\";\nimport { auth, db } from \"../src/firebase\";\nimport * as routes from \"../src/constants/routes\";\n\nconst SignUpPage = () => __jsx(AppWithAuthentication, null, __jsx(SignUpForm, null));\n\nconst updateByPropertyName = (propertyName, value) => () => ({\n  [propertyName]: value\n});\n\nconst INITIAL_STATE = {\n  username: \"\",\n  email: \"\",\n  passwordOne: \"\",\n  passwordTwo: \"\",\n  error: null\n};\n\nclass SignUpForm extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", event => {\n      const {\n        username,\n        email,\n        passwordOne\n      } = this.state;\n      auth.doCreateUserWithEmailAndPassword(email, passwordOne).then(authUser => {\n        // Create a user in your own accessible Firebase Database too\n        db.doCreateUser(authUser.user.uid, username, email).then(() => {\n          this.setState(() => _objectSpread({}, INITIAL_STATE));\n          Router.push(routes.HOME);\n        }).catch(error => {\n          this.setState(updateByPropertyName(\"error\", error));\n        });\n      }).catch(error => {\n        this.setState(updateByPropertyName(\"error\", error));\n      });\n      event.preventDefault();\n    });\n\n    this.state = _objectSpread({}, INITIAL_STATE);\n  }\n\n  render() {\n    const {\n      username,\n      email,\n      passwordOne,\n      passwordTwo,\n      error\n    } = this.state;\n    const isInvalid = passwordOne !== passwordTwo || passwordOne === \"\" || username === \"\";\n    return __jsx(\"div\", null, __jsx(Container, {\n      className: \"d-flex align-items-center justify-content-center\",\n      style: {\n        minHeight: \"80vh\"\n      }\n    }, __jsx(\"div\", {\n      className: \"w-100\",\n      style: {\n        maxWidth: \"500px\"\n      }\n    }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n      className: \"text-center mb-4\"\n    }, \"Join FeliX Community !\"), __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Group, {\n      id: \"username\"\n    }, __jsx(Form.Label, null, \"User Name\"), __jsx(Form.Control, {\n      value: username,\n      onChange: event => this.setState(updateByPropertyName(\"username\", event.target.value)),\n      type: \"text\",\n      placeholder: \"User Name\"\n    })), __jsx(Form.Group, {\n      id: \"email\"\n    }, __jsx(Form.Label, null, \"Email\"), __jsx(Form.Control, {\n      value: email,\n      onChange: event => this.setState(updateByPropertyName(\"email\", event.target.value)),\n      type: \"text\",\n      placeholder: \"Email Address\"\n    })), __jsx(Form.Group, {\n      id: \"password\"\n    }, __jsx(Form.Label, null, \"Password\"), __jsx(Form.Control, {\n      value: passwordOne,\n      onChange: event => this.setState(updateByPropertyName(\"passwordOne\", event.target.value)),\n      type: \"password\",\n      placeholder: \"Password\"\n    })), __jsx(Form.Group, {\n      id: \"password-confirm\"\n    }, __jsx(Form.Label, null, \"Password Confirmation\"), __jsx(Form.Control, {\n      value: passwordTwo,\n      onChange: event => this.setState(updateByPropertyName(\"passwordTwo\", event.target.value)),\n      type: \"password\",\n      placeholder: \"Confirm Password\"\n    })), __jsx(Button, {\n      disabled: isInvalid,\n      className: \"w-100\",\n      style: {\n        background: \"#343a40\",\n        color: \"#ffc107\",\n        border: \"none\"\n      },\n      type: \"submit\"\n    }, \"JOIN NOW\"), error && __jsx(\"p\", null, error.message)))))));\n  }\n\n}\n\nconst SignUpLink = () => __jsx(\"p\", {\n  className: \"w-100 text-center mt-3\"\n}, \"Don't have an account?\", \" \", __jsx(Link, {\n  href: routes.SIGN_UP\n}, __jsx(\"a\", null, \"Sign Up\")));\n\nexport default SignUpPage;\nexport { SignUpForm, SignUpLink };","map":null,"metadata":{},"sourceType":"module"}