{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEV\\\\git_microservices\\\\microservices\\\\src\\\\front_service\\\\src\\\\components\\\\PasswordChange\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { auth } from '../../firebase';\n\nconst updateByPropertyName = (propertyName, value) => () => ({\n  [propertyName]: value\n});\n\nconst INITIAL_STATE = {\n  passwordOne: '',\n  passwordTwo: '',\n  error: null\n};\n\nclass PasswordChangeForm extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", event => {\n      const {\n        passwordOne\n      } = this.state;\n      auth.doPasswordUpdate(passwordOne).then(() => {\n        this.setState(() => _objectSpread({}, INITIAL_STATE));\n      }).catch(error => {\n        this.setState(updateByPropertyName('error', error));\n      });\n      event.preventDefault();\n    });\n\n    this.state = _objectSpread({}, INITIAL_STATE);\n  }\n\n  render() {\n    const {\n      passwordOne,\n      passwordTwo,\n      error\n    } = this.state;\n    const isInvalid = passwordOne !== passwordTwo || passwordOne === '';\n    return __jsx(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, __jsx(\"input\", {\n      value: passwordOne,\n      onChange: event => this.setState(updateByPropertyName('passwordOne', event.target.value)),\n      type: \"password\",\n      placeholder: \"New Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }), __jsx(\"input\", {\n      value: passwordTwo,\n      onChange: event => this.setState(updateByPropertyName('passwordTwo', event.target.value)),\n      type: \"password\",\n      placeholder: \"Confirm New Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), __jsx(\"button\", {\n      disabled: isInvalid,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Reset My Password\"), error && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 20\n      }\n    }, error.message));\n  }\n\n}\n\nexport default PasswordChangeForm;","map":{"version":3,"sources":["D:/DEV/git_microservices/microservices/src/front_service/src/components/PasswordChange/index.js"],"names":["React","Component","auth","updateByPropertyName","propertyName","value","INITIAL_STATE","passwordOne","passwordTwo","error","PasswordChangeForm","constructor","props","event","state","doPasswordUpdate","then","setState","catch","preventDefault","render","isInvalid","onSubmit","target","message"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,IAAT,QAAqB,gBAArB;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyB,OAAO;AAC3D,GAACD,YAAD,GAAgBC;AAD2C,CAAP,CAAtD;;AAIA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,EADO;AAEpBC,EAAAA,WAAW,EAAE,EAFO;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMA,MAAMC,kBAAN,SAAiCT,SAAjC,CAA2C;AACzCU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,sCAMPC,KAAD,IAAW;AACpB,YAAM;AAAEN,QAAAA;AAAF,UAAkB,KAAKO,KAA7B;AAEAZ,MAAAA,IAAI,CAACa,gBAAL,CAAsBR,WAAtB,EACGS,IADH,CACQ,MAAM;AACV,aAAKC,QAAL,CAAc,wBAAYX,aAAZ,CAAd;AACD,OAHH,EAIGY,KAJH,CAIST,KAAK,IAAI;AACd,aAAKQ,QAAL,CAAcd,oBAAoB,CAAC,OAAD,EAAUM,KAAV,CAAlC;AACD,OANH;AAQAI,MAAAA,KAAK,CAACM,cAAN;AACD,KAlBkB;;AAGjB,SAAKL,KAAL,qBAAkBR,aAAlB;AACD;;AAgBDc,EAAAA,MAAM,GAAG;AACP,UAAM;AACJb,MAAAA,WADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA;AAHI,QAIF,KAAKK,KAJT;AAMA,UAAMO,SAAS,GACbd,WAAW,KAAKC,WAAhB,IACAD,WAAW,KAAK,EAFlB;AAIA,WACE;AAAM,MAAA,QAAQ,EAAE,KAAKe,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAEf,WADT;AAEE,MAAA,QAAQ,EAAEM,KAAK,IAAI,KAAKI,QAAL,CAAcd,oBAAoB,CAAC,aAAD,EAAgBU,KAAK,CAACU,MAAN,CAAalB,KAA7B,CAAlC,CAFrB;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,WAAW,EAAC,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE;AACE,MAAA,KAAK,EAAEG,WADT;AAEE,MAAA,QAAQ,EAAEK,KAAK,IAAI,KAAKI,QAAL,CAAcd,oBAAoB,CAAC,aAAD,EAAgBU,KAAK,CAACU,MAAN,CAAalB,KAA7B,CAAlC,CAFrB;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,WAAW,EAAC,sBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAaE;AAAQ,MAAA,QAAQ,EAAEgB,SAAlB;AAA6B,MAAA,IAAI,EAAC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAbF,EAiBIZ,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACe,OAAV,CAjBb,CADF;AAqBD;;AArDwC;;AAwD3C,eAAed,kBAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { auth } from '../../firebase';\r\n\r\nconst updateByPropertyName = (propertyName, value) => () => ({\r\n  [propertyName]: value,\r\n});\r\n\r\nconst INITIAL_STATE = {\r\n  passwordOne: '',\r\n  passwordTwo: '',\r\n  error: null,\r\n};\r\n\r\nclass PasswordChangeForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { ...INITIAL_STATE };\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    const { passwordOne } = this.state;\r\n\r\n    auth.doPasswordUpdate(passwordOne)\r\n      .then(() => {\r\n        this.setState(() => ({ ...INITIAL_STATE }));\r\n      })\r\n      .catch(error => {\r\n        this.setState(updateByPropertyName('error', error));\r\n      });\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      passwordOne,\r\n      passwordTwo,\r\n      error,\r\n    } = this.state;\r\n\r\n    const isInvalid =\r\n      passwordOne !== passwordTwo ||\r\n      passwordOne === '';\r\n\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input\r\n          value={passwordOne}\r\n          onChange={event => this.setState(updateByPropertyName('passwordOne', event.target.value))}\r\n          type=\"password\"\r\n          placeholder=\"New Password\"\r\n        />\r\n        <input\r\n          value={passwordTwo}\r\n          onChange={event => this.setState(updateByPropertyName('passwordTwo', event.target.value))}\r\n          type=\"password\"\r\n          placeholder=\"Confirm New Password\"\r\n        />\r\n        <button disabled={isInvalid} type=\"submit\">\r\n          Reset My Password\r\n        </button>\r\n\r\n        { error && <p>{error.message}</p> }\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PasswordChangeForm;"]},"metadata":{},"sourceType":"module"}