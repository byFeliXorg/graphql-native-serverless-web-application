{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEV\\\\front\\\\pages\\\\_app.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n//next uses the App component to initialize pages. We created the \"_app.jsx\" file to override the default App Component.\n//Similar to how Redux is connected to Client-side react apps, we can connect our server-side rendered application here.\n//We use \"Provider\" provided by react-redux and connect our store\n//getInitialProps allows the page to wait for data before rendering starts.\n//Every page that has getInitialProps will be server-side rendered.\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport withRedux from \"next-redux-wrapper\";\nimport store from '../redux/store';\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be accessed by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    })));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["D:/DEV/front/pages/_app.jsx"],"names":["App","Provider","React","withRedux","store","MyApp","getInitialProps","Component","ctx","pageProps","render","props","makeStore"],"mappings":";;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,KAAN,SAAoBL,GAApB,CAAwB;AAEpB,eAAaM,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA7B,EAA+C;AAC3C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAArF,CAD2C,CAG3C;;AACA,WAAO;AAACC,MAAAA,SAAS,EAAEA;AAAZ,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAACH,MAAAA,SAAD;AAAYE,MAAAA,SAAZ;AAAuBL,MAAAA;AAAvB,QAAgC,KAAKO,KAA3C;AAEA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD,eAAeK,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AAKH;;AAlBmB,C,CAqBxB;;;AACA,MAAMG,SAAS,GAAG,MAAMR,KAAxB,C,CAEA;;;AACA,eAAeD,SAAS,CAACS,SAAD,CAAT,CAAqBP,KAArB,CAAf","sourcesContent":["//next uses the App component to initialize pages. We created the \"_app.jsx\" file to override the default App Component.\r\n\r\n//Similar to how Redux is connected to Client-side react apps, we can connect our server-side rendered application here.\r\n//We use \"Provider\" provided by react-redux and connect our store\r\n//getInitialProps allows the page to wait for data before rendering starts.\r\n//Every page that has getInitialProps will be server-side rendered.\r\n\r\nimport App from 'next/app';\r\nimport {Provider} from 'react-redux';\r\nimport React from 'react';\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport store from '../redux/store';\r\n\r\nclass MyApp extends App {\r\n\r\n    static async getInitialProps({Component, ctx}) {\r\n        const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n\r\n        //Anything returned here can be accessed by the client\r\n        return {pageProps: pageProps};\r\n    }\r\n\r\n    render() {\r\n        //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\r\n        const {Component, pageProps, store} = this.props;\r\n\r\n        return (\r\n            <Provider store={store}>\r\n                <Component {...pageProps}/>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\n//makeStore function that returns a new store for every request\r\nconst makeStore = () => store;\r\n\r\n//withRedux wrapper that passes the store to the App Component\r\nexport default withRedux(makeStore)(MyApp);\r\n"]},"metadata":{},"sourceType":"module"}