{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst INITIAL_STATE = {\n  authUser: null\n};\n\nconst applySetAuthUser = (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n  authUser: action.authUser\n});\n\nfunction sessionReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'AUTH_USER_SET':\n      {\n        return applySetAuthUser(state, action);\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default sessionReducer;","map":{"version":3,"sources":["D:/DEV/git_microservices/microservices/src/front_service/src/reducers/session.js"],"names":["INITIAL_STATE","authUser","applySetAuthUser","state","action","sessionReducer","type"],"mappings":";;;;;;AAAA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AADU,CAAtB;;AAIA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,qCACpBD,KADoB;AAEvBF,EAAAA,QAAQ,EAAEG,MAAM,CAACH;AAFM,EAAzB;;AAKA,SAASI,cAAT,CAAwBF,KAAK,GAAGH,aAAhC,EAA+CI,MAA/C,EAAuD;AACrD,UAAOA,MAAM,CAACE,IAAd;AACE,SAAK,eAAL;AAAuB;AACrB,eAAOJ,gBAAgB,CAACC,KAAD,EAAQC,MAAR,CAAvB;AACD;;AACD;AAAU,aAAOD,KAAP;AAJZ;AAMD;;AAED,eAAeE,cAAf","sourcesContent":["const INITIAL_STATE = {\r\n  authUser: null,\r\n};\r\n\r\nconst applySetAuthUser = (state, action) => ({\r\n  ...state,\r\n  authUser: action.authUser\r\n});\r\n\r\nfunction sessionReducer(state = INITIAL_STATE, action) {\r\n  switch(action.type) {\r\n    case 'AUTH_USER_SET' : {\r\n      return applySetAuthUser(state, action);\r\n    }\r\n    default : return state;\r\n  }\r\n}\r\n\r\nexport default sessionReducer;"]},"metadata":{},"sourceType":"module"}