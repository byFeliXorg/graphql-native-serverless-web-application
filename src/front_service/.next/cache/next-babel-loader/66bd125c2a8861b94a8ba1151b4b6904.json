{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { auth } from '../../firebase';\n\nconst updateByPropertyName = (propertyName, value) => () => ({\n  [propertyName]: value\n});\n\nconst INITIAL_STATE = {\n  passwordOne: '',\n  passwordTwo: '',\n  error: null\n};\n\nclass PasswordChangeForm extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSubmit\", event => {\n      const {\n        passwordOne\n      } = this.state;\n      auth.doPasswordUpdate(passwordOne).then(() => {\n        this.setState(() => _objectSpread({}, INITIAL_STATE));\n      }).catch(error => {\n        this.setState(updateByPropertyName('error', error));\n      });\n      event.preventDefault();\n    });\n\n    this.state = _objectSpread({}, INITIAL_STATE);\n  }\n\n  render() {\n    const {\n      passwordOne,\n      passwordTwo,\n      error\n    } = this.state;\n    const isInvalid = passwordOne !== passwordTwo || passwordOne === '';\n    return __jsx(\"form\", {\n      onSubmit: this.onSubmit\n    }, __jsx(\"input\", {\n      value: passwordOne,\n      onChange: event => this.setState(updateByPropertyName('passwordOne', event.target.value)),\n      type: \"password\",\n      placeholder: \"New Password\"\n    }), __jsx(\"input\", {\n      value: passwordTwo,\n      onChange: event => this.setState(updateByPropertyName('passwordTwo', event.target.value)),\n      type: \"password\",\n      placeholder: \"Confirm New Password\"\n    }), __jsx(\"button\", {\n      disabled: isInvalid,\n      type: \"submit\"\n    }, \"Reset My Password\"), error && __jsx(\"p\", null, error.message));\n  }\n\n}\n\nexport default PasswordChangeForm;","map":null,"metadata":{},"sourceType":"module"}